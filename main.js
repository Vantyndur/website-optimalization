const indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB,databaseName="myDB";class Subject{constructor(e,t,n){this.id=e,this.name=t,this.term=n}tohtmlTableRow(e){return`<tr><th scope="row">${e}</th><td>${this.name}</td><td>${this.term}</td></tr>`}tohtmlTableRowCancel(e){return`<tr><th scope="row">${e}</th><td>${this.name}</td><td>${this.term}</td><td><button id="${"subject"+this.id}">Usuń</button></td></tr>`}static htmlTableHeaders(){return`<tr><th scope="col">#</th><th scope="col">Nazwa przedmiotu</th><th scope="col">Semestr, na kt\xf3rym obowiązuje</th></tr>`}static htmlTableHeadersCancel(){return`<tr><th scope="col">#</th><th scope="col">Nazwa przedmiotu</th><th scope="col">Semestr, na kt\xf3rym obowiązuje</th><th> </th></tr>`}}class Grade{constructor(e,t,n,d,o){this.id=e,this.studentId=t,this.subjectId=n,this.value=d,this.date=o}tohtmlTableRow(e,t){return`<tr><th scope="row">${e}</th><td>${this.value}</td><td>${t}</td><td>${new Date(this.date).toLocaleDateString("pl-PL")}</td><td><button id="${"grade"+this.id}">Usuń</button></td></tr>`}static htmlTableHeaders(){return'<tr><th scope="col">#</th><th>Ocena</th><th>Nazwa przedmiotu</th><th>Data wystawienia</th><th> </th></tr>'}}class Student{constructor(e,t,n,d){this.id=e,this.name=t,this.actualTerm=n,this.subjects=d}tohtmlTableRow(e){return`<tr id="${"student"+this.id.toString()}"><th scope="row">${e}</th><td>${this.name}</td><td>${this.actualTerm}</td></tr>`}static htmlTableHeaders(){return'<tr><th scope="col">#</th><th>Imię i Nazwisko</th><th>Semestr</th></tr>'}toString(){return`id: ${this.id} name: ${this.name} actualTerm: ${this.actualTerm}`}}function ArrayRemoveElement(e,t){return e.filter(e=>e!=t)}function showStudents(e){let t=document.getElementById("tableContainer");if(e.length>0){let n=e.map(e=>new Student(e.id,e.name,e.actualTerm,e.subjects));t.innerHTML="<h3>Baza Student\xf3w:</h3><hr>";let d=`<table class="table">${Student.htmlTableHeaders()}`,o=1;n.forEach(e=>{d+=e.tohtmlTableRow(o),o+=1}),d+="</table>",t.innerHTML+=d;try{n.forEach(e=>{document.getElementById("student"+e.id.toString()).addEventListener("click",function(){showStudentGrades(e),showStudentPage(e)})})}catch(a){console.error("Error while adding Event listeners to table rows",a)}}else t.innerHTML="<h3>Baza student\xf3w jest aktualnie pusta</h3>"}function showStudentPage(e){let t=document.getElementById("studentPageShowGradesButton"),n=t.cloneNode(!0);t.parentNode.replaceChild(n,t),n.addEventListener("click",function(){showStudentGrades(e)});let d=document.getElementById("studentPageAddGradeButton"),o=d.cloneNode(!0);d.parentNode.replaceChild(o,d),o.addEventListener("click",function(){showAddGradeToStudentPage(e)});let a=document.getElementById("submitAddGradeToStudent"),l=a.cloneNode(!0);a.parentNode.replaceChild(l,a),l.addEventListener("click",function(){addGradeToStudent(e)});let s=document.getElementById("cancelAddGradeToStudent"),r=s.cloneNode(!0);s.parentNode.replaceChild(r,s),r.addEventListener("click",function(){cancelAddGradeToStudent(e)});let c=document.getElementById("studentPageShowSubjectsButton"),u=c.cloneNode(!0);c.parentNode.replaceChild(u,c),u.addEventListener("click",function(){showStudentSubjects(e)});let i=document.getElementById("studentPageAddSubjectButton"),y=i.cloneNode(!0);i.parentNode.replaceChild(y,i);let g=document.getElementById("submitAddSubjectToStudentButton"),m=g.cloneNode(!0);g.parentNode.replaceChild(m,g),m.addEventListener("click",function(){addSubjectToStudent(e)});let b=document.getElementById("cancelAddSubjectToStudentButton"),h=b.cloneNode(!0);b.parentNode.replaceChild(h,b),h.addEventListener("click",function(){cancelAddSubjectToStudent(e)});let S=document.getElementById("deleteStudentButton"),p=S.cloneNode(!0);S.parentNode.replaceChild(p,S),p.addEventListener("click",function(){deleteStudent(e)}),document.getElementById("studentPageName").innerHTML=`${e.name}`,document.getElementById("studentPageActualTerm").innerHTML=`${e.actualTerm}`,document.getElementById("refreshButton").style.display="none",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="none",document.getElementById("studentPage").style.display="block",document.getElementById("addSubjectForm").style.display="none",document.getElementById("studentPageGrades").style.display="none",document.getElementById("studentPageSubjects").style.display="none",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none"}function startConnection(){document.getElementById("refreshButton").style.display="flow-root",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="block",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="none",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none",document.getElementById("allSubjectsPage").style.display="none";new Promise(function(e,t){let n=indexedDB.open(databaseName,1);n.onupgradeneeded=function(e){let t=e.target.result;t.createObjectStore("Students",{keyPath:"id"}).createIndex("idIndex","id",{unique:!0});t.createObjectStore("Subjects",{keyPath:"id"}).createIndex("idIndex","id",{unique:!0});let n=t.createObjectStore("Grades",{keyPath:"id"});n.createIndex("idIndex","id",{unique:!0}),n.createIndex("studentIdIndex",["studentId"],{unique:!1}),n.createIndex("subjectIdIndex",["subjectId"],{unique:!1}),console.log("Established connection with empty database. Created ObjectStores.")},n.onsuccess=function(n){let d=n.target.result;console.log("Connection with database has been established.");let o=d.transaction("Students","readonly"),a=o.objectStore("Students").getAll();a.onsuccess=function(t){e(t.target.result)},a.onerror=function(e){t(e)},o.oncomplete=function(){d.close(),console.log("Transaction has been completed.")},o.onerror=function(e){console.error("Transaction has been canceled.",e)}},n.onerror=function(e){console.error("Couldn't establish connection with database. ",e)}}).then(function(e){showStudents(e)},function(e){console.error("Reading students error:",e)})}function showAddStudentForm(){document.getElementById("refreshButton").style.display="none",document.getElementById("addStudentForm").style.display="block",document.getElementById("tableContainer").style.display="none",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="none",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none",document.getElementById("allSubjectsPage").style.display="none"}function addStudent(){let e=document.getElementById("StudentName").value;document.getElementById("StudentName").value="";let t=parseInt(document.getElementById("StudentActualTerm").value);if(document.getElementById("StudentActualTerm").value="",e&&t){let n=indexedDB.open(databaseName,1);n.onsuccess=function(n){let d=n.target.result,o=d.transaction(["Students"],"readwrite"),a=o.objectStore("Students");new Promise(function(e,t){let n=a.index("idIndex").openCursor(null,"prev");n.onsuccess=function(t){e((result=t.target.result)?result.value.id:null)},n.onerror=function(e){t(e)}}).then(function(n){let d;d=null!==n?new Student(parseInt(n)+1,e,t,[]):new Student(0,e,t,[]);let o=a.add(d);o.onsuccess=function(){console.log("Successfully added student to Students:",d)},o.onerror=function(e){console.error("Error while adding student to Students:",e)}},function(e){console.error("Error reading last id:",e)}),o.oncomplete=function(){d.close(),console.log("Transaction has been completed."),startConnection()},o.onerror=function(e){console.error("Transaction has been canceled.",n)}}}else console.error("You should provide name and actualTerm of student")}function cancelAddStudent(){document.getElementById("StudentName").value="",document.getElementById("StudentActualTerm").value="",document.getElementById("refreshButton").style.display="flow-root",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="block",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="none"}function showAddSubjectForm(){document.getElementById("refreshButton").style.display="none",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="none",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="block",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none",document.getElementById("allSubjectsPage").style.display="none"}function cancelAddSubject(){document.getElementById("SubjectName").value="",document.getElementById("SubjectTerm").value="",document.getElementById("refreshButton").style.display="flow-root",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="block",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="none"}function addSubject(){let e=document.getElementById("SubjectName").value;document.getElementById("SubjectName").value="";let t=document.getElementById("SubjectTerm").value;if(document.getElementById("SubjectTerm").value="",e&&t){let n=indexedDB.open(databaseName,1);n.onsuccess=function(n){let d=n.target.result,o=d.transaction(["Subjects"],"readwrite"),a=o.objectStore("Subjects");new Promise(function(e,t){let n=a.index("idIndex").openCursor(null,"prev");n.onsuccess=function(t){e((result=t.target.result)?result.value.id:null)},n.onerror=function(e){t(e)}}).then(function(n){let d;d=null!==n?new Subject(parseInt(n)+1,e,t):new Subject(0,e,t);let o=a.add(d);o.onsuccess=function(){console.log("Successfully added subject to Subjects:",d)},o.onerror=function(e){console.error("Error while adding subject to Subjects:",e)}},function(e){console.error("Error reading last id:",e)}),o.oncomplete=function(){d.close(),console.log("Transaction has been completed.")},o.onerror=function(e){console.error("Transaction has been canceled.",n)}}}else console.error("You should provide name and actualTerm of student");document.getElementById("refreshButton").style.display="flow-root",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="block",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="none"}function showStudentSubjects(e){document.getElementById("studentPageShowGradesButton").style.backgroundColor="rgb(234,234,234)",document.getElementById("studentPageShowSubjectsButton").style.backgroundColor="rgb(180,180,180)",document.getElementById("studentPageGrades").style.display="none",document.getElementById("studentPageSubjects").style.display="block",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none";new Promise(function(e,t){let n=indexedDB.open(databaseName,1);n.onsuccess=function(n){let d=n.target.result,o=d.transaction(["Subjects"],"readonly"),a=o.objectStore("Subjects").getAll();a.onsuccess=function(t){e(t.target.result)},a.onerror=function(e){t(e)},o.oncomplete=function(){d.close(),console.log("Transaction has been completed.")},o.onerror=function(e){console.error("Transaction has been canceled.",e)}}}).then(function(t){let n=t.filter(t=>{let n=!1;return e.subjects.forEach(function(e){e==t.id&&(n=!0)}),n}),d=t.filter(e=>!n.includes(e)).map(e=>new Subject(e.id,e.name,e.term));if(document.getElementById("studentPageAddSubjectButton").addEventListener("click",function(){showAddSubjectToStudentPage(d)}),e.subjects.length>0){let o=n.map(e=>new Subject(e.id,e.name,e.term)),a=`<h4>Student uczęszcza / uczęszczał na ponizsze przedmioty:</h4><table class="table">${Subject.htmlTableHeaders()}`,l=1;o.forEach(e=>{a+=e.tohtmlTableRow(l),l+=1}),a+="</table>",document.getElementById("studentPageSubjectsTable").innerHTML=a}else document.getElementById("studentPageSubjectsTable").innerHTML="<h4>Student nie uczęszcza / uczęszczał na zaden przedmiot.</h4>"},function(e){console.error("Error while reading Subjects:",e)})}function showStudentGrades(e){document.getElementById("studentPageShowGradesButton").style.backgroundColor="rgb(180,180,180)",document.getElementById("studentPageShowSubjectsButton").style.backgroundColor="rgb(234,234,234)",document.getElementById("studentPageGrades").style.display="block",document.getElementById("studentPageSubjects").style.display="none",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none";let t=indexedDB.open(databaseName,1);t.onsuccess=function(t){let n=t.target.result,d=n.transaction(["Grades"],"readonly");d.objectStore("Grades").index("studentIdIndex").getAll([e.id]).onsuccess=function(t){let d=t.target.result;if(d.length>0){let o=d.map(e=>new Grade(e.id,e.studentId,e.subjectId,e.value,e.date));n.transaction(["Subjects"],"readonly").objectStore("Subjects").getAll().onsuccess=function(t){let n=t.target.result,d=`<h4>Oceny studenta:</h4><table class="table"> ${Grade.htmlTableHeaders()}`,a=1;o.forEach(e=>{let t="";n.forEach(n=>{e.subjectId==n.id&&(t=n.name)}),d+=e.tohtmlTableRow(a,t),a+=1}),d+="</table>",document.getElementById("studentPageGradeTable").innerHTML=d,o.forEach(t=>{document.getElementById("grade"+t.id).addEventListener("click",function(){deleteGrade(t,e)})})}}else document.getElementById("studentPageGradeTable").innerHTML="<h4>Student aktualnie nie ma zadnych ocen.</h4>"},d.oncomplete=function(){n.close(),console.log("Transaction has been completed.")},d.onerror=function(e){console.error("Transaction has been canceled.",e)}}}function showAddSubjectToStudentPage(e){if(e.length>0){document.getElementById("addSubjectToStudentPage").style.display="block",document.getElementById("addGradeToStudentPage").style.display="none",document.getElementById("studentPageGrades").style.display="none",document.getElementById("studentPageSubjects").style.display="none";let t="";e.forEach(e=>{t+=`<option value="${e.id}">${e.name}&nbsp;&nbsp;semestr: ${e.term}</option>`}),document.getElementById("subjectsDropdown").innerHTML=t}else alert("Brak przedmiot\xf3w do, kt\xf3rych student m\xf3gły być przypisany.\nNajpierw dodaj przedmiot przed przypisaniem studenta do przedmiotu!")}function addSubjectToStudent(e){let t=parseInt(document.getElementById("subjectsDropdown").value);e.subjects.push(t);let n=indexedDB.open(databaseName,1);n.onsuccess=function(t){let n=t.target.result,d=n.transaction(["Students"],"readwrite"),o=d.objectStore("Students").put(e);o.onsuccess=function(){console.log("Succesfuly updated Students Subjects")},o.onerror=function(e){console.error("Error while updating student:",e)},d.oncomplete=function(){n.close(),console.log("Transaction has been completed."),showStudentPage(e),showStudentSubjects(e)},d.onerror=function(e){console.error("Transaction has been canceled.",e)}}}function cancelAddSubjectToStudent(e){showStudentPage(e),showStudentSubjects(e)}function showAddGradeToStudentPage(e){if(e.subjects.length>0){document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="block",document.getElementById("studentPageGrades").style.display="none",document.getElementById("studentPageSubjects").style.display="none";let t=indexedDB.open(databaseName);t.onsuccess=function(t){let n=t.target.result,d=n.transaction(["Subjects"],"readonly"),o=d.objectStore("Subjects").getAll();o.onsuccess=function(t){let n=t.target.result,d="";n.forEach(t=>{e.subjects.forEach(e=>{t.id==e&&(d+=`<option value="${t.id}">${t.name}&nbsp;&nbsp;semestr: ${t.term}</option>`)})}),document.getElementById("GradeSubject").innerHTML=d},o.onerror=function(e){console.error("Error while reading from Subjects",e)},d.oncomplete=function(){n.close(),console.log("Transaction has been completed.")},d.onerror=function(e){console.error("Transaction has been canceled.",e)}}}else alert("Student nie jest przypisany do zadnego przedmiotu.\nNajpierw przypisz studenta do przedmiotu!")}function addGradeToStudent(e){let t=parseFloat(document.getElementById("gradeValue").value),n=parseInt(document.getElementById("GradeSubject").value),d=Date();new Promise(function(e,t){let n=indexedDB.open(databaseName,1);n.onsuccess=function(n){let d=n.target.result,o=d.transaction(["Grades"],"readonly"),a=o.objectStore("Grades").index("idIndex").openCursor(null,"prev");a.onsuccess=function(t){e((result=t.target.result)?result.value.id:null)},a.onerror=function(e){t(e)},o.oncomplete=function(){d.close(),console.log("Transaction has been completed.")},o.onerror=function(e){console.error("Transaction has been canceled.",e)}},n.onerror=function(e){console.error("Error while connecting to database:",e)}}).then(function(o){let a;a=null!=o?new Grade(o+1,e.id,n,t,d):new Grade(0,e.id,n,t,d);indexedDB.open(databaseName,1).onsuccess=function(t){let n=t.target.result,d=n.transaction(["Grades"],"readwrite"),o=d.objectStore("Grades").add(a);o.onsuccess=function(){console.log("Succesfuly added grade to student")},o.onerror=function(e){console.error("Error while adding grade to student",e)},d.oncomplete=function(){n.close(),console.log("Transaction has been completed."),showStudentGrades(e),showStudentPage(e)},d.onerror=function(e){console.error("Transaction has been canceled.",e)}}},function(e){console.error("Error while getting id of the last grade:",e)})}function cancelAddGradeToStudent(e){showStudentGrades(e),showStudentPage(e)}function deleteStudent(e){if(confirm("Czy napewno chcesz usunąć studenta?")){let t=indexedDB.open(databaseName,1);t.onsuccess=function(t){let n=t.target.result,d=new Promise(function(t,d){let o=n.transaction(["Students"],"readwrite"),a=o.objectStore("Students").delete(e.id);a.onsuccess=function(){t()},a.onerror=function(e){d(e)},o.oncomplete=function(){console.log("Transaction has been completed.")},o.onerror=function(e){console.error("Transaction has been canceled.",e)}}),o=n.transaction(["Grades"],"readwrite"),a=o.objectStore("Grades");a.index("studentIdIndex").getAll([e.id]).onsuccess=function(t){let n=t.target.result;console.log("Test student grades:",n),n.length>0&&(n.forEach(e=>{let t=a.delete(e.id);t.onsuccess=function(){console.log("Deleted grade:",e)},t.onerror=function(e){console.error("Error while deleting grade:",e)}}),d.then(function(){console.log("Succesfuly deleted student:",e)},function(e){console.error("Error while deleting student:",e),o.abort()}))},o.oncomplete=function(){n.close(),console.log("Transaction has been completed."),startConnection()},o.onerror=function(e){console.error("Transaction has been canceled.",e)}},t.onerror=function(e){console.error("Couldn't connect to databse.",error)}}}function deleteSubject(e){if(confirm("Czy na pewno chcesz usunąć przedmiot?")){let t=indexedDB.open(databaseName,1);t.onsuccess=function(t){let n=t.target.result,d=n.transaction(["Subjects","Grades","Students"],"readwrite"),o=d.objectStore("Subjects"),a=d.objectStore("Grades"),l=d.objectStore("Students");console.log("Przedmiot do usunięcia id: ",e.id),o.delete(e.id);new Promise(function(t,n){let d=[],o=a.index("subjectIdIndex").getAll([e.id]);o.onsuccess=function(e){let n=e.target.result;console.log("Grades readed:",n),n.forEach(e=>{a.delete(e.id),d.push(e.studentId),e.id==n[n.length-1].id&&t(d)})},o.onerror=function(e){n(e)}}).then(function(t){let n=new Set(t),d=n.size;n.forEach(t=>{let n=!1;d<=1&&(n=!0),d-=1;new Promise(function(e,d){let o=l.get(t);o.onsuccess=function(t){e([t.target.result,n])},o.onerror=function(e){d(e)}}).then(function(t){let[n,d]=t;console.log("isLast: ",d);let o=new Student(n.id,n.name,n.actualTerm,n.subjects);o.subjects=ArrayRemoveElement(o.subjects,e.id),l.put(o),d&&showAllSubjectsPage()},function(e){console.error("Error while reading from students:",e)})})},function(e){console.error("Error while reading from grades:",e)}),d.oncomplete=function(){n.close(),console.log("Transaction has been completed.")},d.onerror=function(e){console.error("Transaction has been canceled.",e)}},t.onerror=function(e){console.error("Error while opening DataBase:",e)}}}function deleteGrade(e,t){if(confirm("Czy napewno chcesz usunąć ocenę?")){let n=indexedDB.open(databaseName,1);n.onsuccess=function(n){let d=n.target.result,o=d.transaction(["Grades"],"readwrite"),a=o.objectStore("Grades").delete(e.id);a.onsuccess=function(){console.log("Succesfuly deleted grade:",e)},a.onerror=function(e){},o.oncomplete=function(){d.close(),console.log("Transaction has been completed."),showStudentGrades(t),showStudentPage(t)},o.onerror=function(e){console.error("Transaction has been canceled.",e)}}}}function showAllSubjectsPage(){let e=indexedDB.open(databaseName,1);e.onsuccess=function(e){let t=e.target.result,n=t.transaction(["Subjects"],"readonly");n.objectStore("Subjects").getAll().onsuccess=function(e){let t=e.target.result;if(t.length>0){let n=t.map(e=>new Subject(e.id,e.name,e.term)),d=`<h3>Baza przedmiot\xf3w</h3><hr><table class="table">${Subject.htmlTableHeadersCancel()}`,o=1;n.forEach(e=>{d+=e.tohtmlTableRowCancel(o),o+=1}),d+="</table>",document.getElementById("allSubjectsPageTable").innerHTML=d,n.forEach(e=>{document.getElementById("subject"+e.id).addEventListener("click",function(){deleteSubject(e)})})}else document.getElementById("allSubjectsPage").innerHTML="<h3>Baza przedmiot\xf3w jest pusta</h3><br><h4>Dodaj nowy przedmiot.</h4>"},n.oncomplete=function(){t.close(),console.log("Transaction has been completed."),document.getElementById("refreshButton").style.display="none",document.getElementById("addStudentForm").style.display="none",document.getElementById("tableContainer").style.display="none",document.getElementById("studentPage").style.display="none",document.getElementById("addSubjectForm").style.display="none",document.getElementById("addSubjectToStudentPage").style.display="none",document.getElementById("addGradeToStudentPage").style.display="none",document.getElementById("allSubjectsPage").style.display="block"},n.onerror=function(e){console.error("Transaction has been canceled.",e)}}}document.getElementById("refreshButton").addEventListener("click",startConnection),document.getElementById("addStudentButton").addEventListener("click",showAddStudentForm),document.getElementById("submitAddStudent").addEventListener("click",addStudent),document.getElementById("cancelAddStudent").addEventListener("click",cancelAddStudent),document.getElementById("header").addEventListener("click",startConnection),document.getElementById("addSubjectButton").addEventListener("click",showAddSubjectForm),document.getElementById("cancelAddSubject").addEventListener("click",cancelAddSubject),document.getElementById("submitAddSubject").addEventListener("click",addSubject),document.getElementById("showAllSubjectsButton").addEventListener("click",showAllSubjectsPage),document.getElementById("refreshSubjectsButton").addEventListener("click",showAllSubjectsPage),document.getElementById("showAllStudentsButton").addEventListener("click",startConnection),startConnection();
